from typing import Sequence, Union

from alembic import op

revision: str = '123123123123'
down_revision: Union[str, None] = 'b0f9566a5036'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        CREATE OR REPLACE FUNCTION track_changes()
        RETURNS TRIGGER AS $$
        BEGIN
            IF TG_OP = 'DELETE' THEN
            INSERT INTO change_tracker (changed_table, changed_id, changed_datetime, operation)
            VALUES (TG_TABLE_NAME, OLD.id, now(), TG_OP);
            RETURN OLD;
        ELSE
            INSERT INTO change_tracker (changed_table, changed_id, changed_datetime, operation)
            VALUES (TG_TABLE_NAME, NEW.id, now(), TG_OP);
            RETURN NEW;
        END IF;
        END;
    $$ LANGUAGE plpgsql;
    """)

    op.execute("""
        CREATE TRIGGER track_changes_transaction
            AFTER UPDATE OR INSERT OR DELETE
            ON transaction
            FOR EACH ROW
            EXECUTE FUNCTION track_changes();
    """)

    op.execute("""
        CREATE TRIGGER track_changes_user
            AFTER UPDATE OR INSERT OR DELETE
            ON "user"
            FOR EACH ROW
            EXECUTE FUNCTION track_changes();
    """)

    op.execute("""
        CREATE TRIGGER track_changes_category
            AFTER UPDATE OR INSERT OR DELETE
            ON category
            FOR EACH ROW
            EXECUTE FUNCTION track_changes();
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER track_changes_transaction ON transaction")
    op.execute("DROP TRIGGER track_changes_user ON \"user\"")
    op.execute("DROP TRIGGER track_changes_category ON category")
    op.execute("DROP FUNCTION track_changes()")
    # ### end Alembic commands ###